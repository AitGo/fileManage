package com.yh.filesmanage.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yh.filesmanage.diagnose.FileInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFO".
*/
public class FileInfoDao extends AbstractDao<FileInfo, String> {

    public static final String TABLENAME = "FILE_INFO";

    /**
     * Properties of entity FileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Folder_no = new Property(1, String.class, "folder_no", false, "FOLDER_NO");
        public final static Property Maintitle = new Property(2, String.class, "maintitle", false, "MAINTITLE");
        public final static Property Responsibleby = new Property(3, String.class, "responsibleby", false, "RESPONSIBLEBY");
        public final static Property Create_time = new Property(4, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Sbt_word = new Property(5, String.class, "sbt_word", false, "SBT_WORD");
        public final static Property Filing_year = new Property(6, int.class, "filing_year", false, "FILING_YEAR");
        public final static Property Case_no = new Property(7, String.class, "case_no", false, "CASE_NO");
        public final static Property Archive_type_id = new Property(8, int.class, "archive_type_id", false, "ARCHIVE_TYPE_ID");
        public final static Property Barcode = new Property(9, String.class, "barcode", false, "BARCODE");
        public final static Property Box_barcode = new Property(10, String.class, "box_barcode", false, "BOX_BARCODE");
        public final static Property House_no = new Property(11, String.class, "house_no", false, "HOUSE_NO");
        public final static Property Shelf_no = new Property(12, String.class, "shelf_no", false, "SHELF_NO");
        public final static Property Status = new Property(13, String.class, "status", false, "STATUS");
        public final static Property HouseSNo = new Property(14, String.class, "houseSNo", false, "HOUSE_SNO");
        public final static Property AreaNO = new Property(15, String.class, "areaNO", false, "AREA_NO");
        public final static Property CabinetNo = new Property(16, String.class, "cabinetNo", false, "CABINET_NO");
        public final static Property FaceNo = new Property(17, String.class, "faceNo", false, "FACE_NO");
        public final static Property ClassNo = new Property(18, String.class, "classNo", false, "CLASS_NO");
        public final static Property LayerNo = new Property(19, String.class, "layerNo", false, "LAYER_NO");
        public final static Property BoxNo = new Property(20, String.class, "boxNo", false, "BOX_NO");
        public final static Property Rev1 = new Property(21, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(22, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(23, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(24, String.class, "rev4", false, "REV4");
    }


    public FileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FOLDER_NO\" TEXT," + // 1: folder_no
                "\"MAINTITLE\" TEXT," + // 2: maintitle
                "\"RESPONSIBLEBY\" TEXT," + // 3: responsibleby
                "\"CREATE_TIME\" TEXT," + // 4: create_time
                "\"SBT_WORD\" TEXT," + // 5: sbt_word
                "\"FILING_YEAR\" INTEGER NOT NULL ," + // 6: filing_year
                "\"CASE_NO\" TEXT," + // 7: case_no
                "\"ARCHIVE_TYPE_ID\" INTEGER NOT NULL ," + // 8: archive_type_id
                "\"BARCODE\" TEXT," + // 9: barcode
                "\"BOX_BARCODE\" TEXT," + // 10: box_barcode
                "\"HOUSE_NO\" TEXT," + // 11: house_no
                "\"SHELF_NO\" TEXT," + // 12: shelf_no
                "\"STATUS\" TEXT," + // 13: status
                "\"HOUSE_SNO\" TEXT," + // 14: houseSNo
                "\"AREA_NO\" TEXT," + // 15: areaNO
                "\"CABINET_NO\" TEXT," + // 16: cabinetNo
                "\"FACE_NO\" TEXT," + // 17: faceNo
                "\"CLASS_NO\" TEXT," + // 18: classNo
                "\"LAYER_NO\" TEXT," + // 19: layerNo
                "\"BOX_NO\" TEXT," + // 20: boxNo
                "\"REV1\" TEXT," + // 21: rev1
                "\"REV2\" TEXT," + // 22: rev2
                "\"REV3\" TEXT," + // 23: rev3
                "\"REV4\" TEXT);"); // 24: rev4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String folder_no = entity.getFolder_no();
        if (folder_no != null) {
            stmt.bindString(2, folder_no);
        }
 
        String maintitle = entity.getMaintitle();
        if (maintitle != null) {
            stmt.bindString(3, maintitle);
        }
 
        String responsibleby = entity.getResponsibleby();
        if (responsibleby != null) {
            stmt.bindString(4, responsibleby);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String sbt_word = entity.getSbt_word();
        if (sbt_word != null) {
            stmt.bindString(6, sbt_word);
        }
        stmt.bindLong(7, entity.getFiling_year());
 
        String case_no = entity.getCase_no();
        if (case_no != null) {
            stmt.bindString(8, case_no);
        }
        stmt.bindLong(9, entity.getArchive_type_id());
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(10, barcode);
        }
 
        String box_barcode = entity.getBox_barcode();
        if (box_barcode != null) {
            stmt.bindString(11, box_barcode);
        }
 
        String house_no = entity.getHouse_no();
        if (house_no != null) {
            stmt.bindString(12, house_no);
        }
 
        String shelf_no = entity.getShelf_no();
        if (shelf_no != null) {
            stmt.bindString(13, shelf_no);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String houseSNo = entity.getHouseSNo();
        if (houseSNo != null) {
            stmt.bindString(15, houseSNo);
        }
 
        String areaNO = entity.getAreaNO();
        if (areaNO != null) {
            stmt.bindString(16, areaNO);
        }
 
        String cabinetNo = entity.getCabinetNo();
        if (cabinetNo != null) {
            stmt.bindString(17, cabinetNo);
        }
 
        String faceNo = entity.getFaceNo();
        if (faceNo != null) {
            stmt.bindString(18, faceNo);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(19, classNo);
        }
 
        String layerNo = entity.getLayerNo();
        if (layerNo != null) {
            stmt.bindString(20, layerNo);
        }
 
        String boxNo = entity.getBoxNo();
        if (boxNo != null) {
            stmt.bindString(21, boxNo);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(22, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(23, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(24, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(25, rev4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String folder_no = entity.getFolder_no();
        if (folder_no != null) {
            stmt.bindString(2, folder_no);
        }
 
        String maintitle = entity.getMaintitle();
        if (maintitle != null) {
            stmt.bindString(3, maintitle);
        }
 
        String responsibleby = entity.getResponsibleby();
        if (responsibleby != null) {
            stmt.bindString(4, responsibleby);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String sbt_word = entity.getSbt_word();
        if (sbt_word != null) {
            stmt.bindString(6, sbt_word);
        }
        stmt.bindLong(7, entity.getFiling_year());
 
        String case_no = entity.getCase_no();
        if (case_no != null) {
            stmt.bindString(8, case_no);
        }
        stmt.bindLong(9, entity.getArchive_type_id());
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(10, barcode);
        }
 
        String box_barcode = entity.getBox_barcode();
        if (box_barcode != null) {
            stmt.bindString(11, box_barcode);
        }
 
        String house_no = entity.getHouse_no();
        if (house_no != null) {
            stmt.bindString(12, house_no);
        }
 
        String shelf_no = entity.getShelf_no();
        if (shelf_no != null) {
            stmt.bindString(13, shelf_no);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String houseSNo = entity.getHouseSNo();
        if (houseSNo != null) {
            stmt.bindString(15, houseSNo);
        }
 
        String areaNO = entity.getAreaNO();
        if (areaNO != null) {
            stmt.bindString(16, areaNO);
        }
 
        String cabinetNo = entity.getCabinetNo();
        if (cabinetNo != null) {
            stmt.bindString(17, cabinetNo);
        }
 
        String faceNo = entity.getFaceNo();
        if (faceNo != null) {
            stmt.bindString(18, faceNo);
        }
 
        String classNo = entity.getClassNo();
        if (classNo != null) {
            stmt.bindString(19, classNo);
        }
 
        String layerNo = entity.getLayerNo();
        if (layerNo != null) {
            stmt.bindString(20, layerNo);
        }
 
        String boxNo = entity.getBoxNo();
        if (boxNo != null) {
            stmt.bindString(21, boxNo);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(22, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(23, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(24, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(25, rev4);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FileInfo readEntity(Cursor cursor, int offset) {
        FileInfo entity = new FileInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // folder_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // maintitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // responsibleby
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sbt_word
            cursor.getInt(offset + 6), // filing_year
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // case_no
            cursor.getInt(offset + 8), // archive_type_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // barcode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // box_barcode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // house_no
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shelf_no
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // houseSNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // areaNO
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // cabinetNo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // faceNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // classNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // layerNo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // boxNo
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // rev1
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rev2
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // rev3
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // rev4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFolder_no(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMaintitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResponsibleby(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSbt_word(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFiling_year(cursor.getInt(offset + 6));
        entity.setCase_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setArchive_type_id(cursor.getInt(offset + 8));
        entity.setBarcode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBox_barcode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHouse_no(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShelf_no(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHouseSNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAreaNO(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCabinetNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFaceNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClassNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLayerNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBoxNo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRev1(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRev2(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRev3(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRev4(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FileInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FileInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
